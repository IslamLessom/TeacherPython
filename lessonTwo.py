#Переменные предназначены для хранения данных. Название переменной в 
#Python должно начинаться с алфавитного символа или со знака подчеркивания 
#и может содержать алфавитно-цифровые символы и знак подчеркивания. 
#И кроме того, название переменной не должно совпадать с названием ключевых слов языка Python. 
#Ключевых слов не так много, их легко запомнить:

#False      await      else       import     pass
#None       break      except     in         raise
#True       class      finally    is         return
#and        continue   for        lambda     try
#as         def        from       nonlocal   while
#assert     del        global     not        with
#async      elif       if         or         yield

#Например, создадим переменную:

name = "Tom"

#В пайтоне применяется два типа наименования переменных: camel case и underscore notation.

#Camel case подразумевает, что каждое новое подслово в наименовании переменной начинается с большой буквы. Например:

userName = "Tom"

#Underscore notation подразумевает, что подслова в наименовании переменной разделяются знаком подчеркивания. Например:

user_name = "Tom"
#И также надо учитывать регистрозависимость, поэтому переменные name и Name будут представлять разные объекты.

# две разные переменные
name = "Tom"
Name = "Tom"
#Определив переменную, мы можем использовать в программе. 
# Например, попытаться вывести ее содержимое на консоль с помощью встроенной функции print:

name = "Tom"  # определение переменной name
print(name)   # вывод значения переменной name на консоль

#Типы данных


#Переменная хранит данные одного из типов данных. В Python существует множество различных типов данных. \
# В данном случае рассмотрим только самые базовые типы: bool, int, float, complex и str.

#Логические значения

#Тип bool представляет два логических значения: True (верно, истина) или False (неверно, ложь). 
#Значение True служит для того, чтобы показать, что что-то истинно. Тогда как значение False, наоборот, 
#показывает, что что-то ложно. Пример переменных данного типа:


isMarried = False
print(isMarried)    # False
 
isAlive = True
print(isAlive)      # True

#Целые числа

#Тип int представляет целое число, например, 1, 4, 8, 50. Пример


age = 21
print("Возраст:", age)    # Возраст: 21
 
count = 15
print("Количество:", count) # Количество: 15

#По умолчанию стандартные числа расцениваются как числа в десятичной системе. 
# Но Python также поддерживает числа в двоичной, восьмеричной и шестнадцатеричной системах.

#Для указания, что число представляет двоичную систему, перед числом ставится префикс 0b:


a = 0b11
b = 0b1011
c = 0b100001
print(a)    # 3 в десятичной системе
print(b)    # 11 в десятичной системе
print(c)    # 33 в десятичной системе

#Для указания, что число представляет восьмеричную систему, перед числом ставится префикс 0o:


a = 0o7
b = 0o11
c = 0o17
print(a)    # 7 в десятичной системе
print(b)    # 9 в десятичной системе
print(c)    # 15 в десятичной системе

#Для указания, что число представляет шестнадцатеричную систему, перед числом ставится префикс 0x:


a = 0x0A
b = 0xFF
c = 0xA1
print(a)    # 10 в десятичной системе
print(b)    # 255 в десятичной системе
print(c)    # 161 в десятичной системе

#Стоит отметить, что в какой-бы системе мы не передали число в функцию print для вывода на консоль, оно по умолчанию будет выводиться в десятичной системе.

#Дробные числа

#Тип float представляет число с плавающей точкой, например, 1.2 или 34.76. 
# В качесте разделителя целой и дробной частей используется точка.


height = 1.68
pi = 3.14
weight = 68.
print(height)   # 1.68
print(pi)       # 3.14
print(weight)   # 68.0

#Число с плавающей точкой можно определять в экспоненциальной записи:


x = 3.9e3
print(x)  # 3900.0
 
x = 3.9e-3
print(x)  # 0.0039

#Число float может иметь только 18 значимых символов. Так, в данном случае используются только два символа - 3.9.
# И если число слишком велико или слишком мало, то мы можем записывать число в подобной нотации, используя экспоненту. \
# Число после экспоненты указывает степень числа 10, на которое надо умножить основное число - 3.9.

#Динамическая типизация
#Python является языком с динамической типизацией. А это значит, что переменная не привязана жестко с определенному типу.

#Тип переменной определяется исходя из значения, которое ей присвоено. 
# Так, при присвоении строки в двойных или одинарных кавычках переменная имеет тип str. 
# При присвоении целого числа Python автоматически определяет тип переменной как int. 
# Чтобы определить переменную как объект float, ей присваивается дробное число, в котором разделителем целой и 
# дробной части является точка.

#При этом в процессе работы программы мы можем изменить тип переменной, присвоив ей значение другого типа:

userId = "abc"  # тип str
print(userId)
 
userId = 234  # тип int
print(userId)
#С помощью встроенной функции type() динамически можно узнать текущий тип переменной:


userId = "abc"      # тип str
print(type(userId)) # <class 'str'>
 
userId = 234        # тип int
print(type(userId)) # <class 'int'>