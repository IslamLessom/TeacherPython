#Условные выражения

#Ряд операций представляют условные выражения. Все эти операции принимают два операнда и возвращают логическое значение, 
#которое в Python представляет тип bool. 
#Существует только два логических значения - True (выражение истинно) и False (выражение ложно).

#Операции сравнения

#Простейшие условные выражения представляют операции сравнения, которые сравнивают два значения. Python поддерживает следующие операции сравнения:

==

#Возвращает True, если оба операнда равны. Иначе возвращает False.

!=

#Возвращает True, если оба операнда НЕ равны. Иначе возвращает False.

> (больше чем)

#Возвращает True, если первый операнд больше второго.

< (меньше чем)

#Возвращает True, если первый операнд меньше второго.

>= (больше или равно)

#Возвращает True, если первый операнд больше или равен второму.

<= (меньше или равно)

#Возвращает True, если первый операнд меньше или равен второму.

#Примеры операций сравнения:


a = 5
b = 6
result = 5 == 6  # сохраняем результат операции в переменную
print(result)  # False - 5 не равно 6
print(a != b)  # True
print(a > b)  # False - 5 меньше 6
print(a < b)  # True
 
bool1 = True
bool2 = False
print(bool1 == bool2)  # False - bool1 не равно bool2

#Операции сравнения могут сравнивать различные объекты - 
# строки, числа, логические значения, однако оба операнда операции должны представлять один и тот же тип.

#Логические операции

#Для создания составных условных выражений применяются логические операции. 
#В Python имеются следующие логические операторы:

Оператор and (логическое умножение) применяется к двум операндам:


x and y

#Сначала оператор and оценивает выражение x, 
#и если оно равно False, то возвращается его значение. Если оно равно True, то оценивается второй операнд - y и возвращается значение y.

age = 22
weight = 58
result = age > 21 and weight == 58
print(result)  # True

#В данном случае оператор and сравнивает результаты двух выражений: age > 21 weight == 58. 
# И если оба этих выражений возвращают True, то оператор and также возвращает True 
# (формально возвращается значение последнего операнда).

#Но операндами оператора and необязательно выступают значения True и False. Это могут быть любые значения. Например:

result = 4 and "w"
print(result)  # w, так как 4 равно True, поэтому возвращается значение последнего операнда
 
result = 0 and "w"
print(result)  # 0, так как 0 эквивалентно False

#В данном случае число 0 и пустая строка "" расматриваются как False, 
# все остальные числа и непустые строки эквивалентны True

or (логическое сложение) также применяется к двум операндам:

x or y

#Сначала оператор or оценивает выражение x, и если оно равно True, то возвращается его значение. 
#Если оно равно False, то оценивается второй операнд - y и возвращается значение y. Например

age = 22
isMarried = False
result = age > 21 or isMarried
print(result)  # True, так как выражение age > 21 равно True
И также оператор or может применяться к любым значениям. Например:

result = 4 or "w"
print(result)  # 4, так как 4 эквивалентно True, поэтому возвращается значение первого операнда
 
result = 0 or "w"
print(result)  # w, так как 0 эквивалентно False, поэтому возвращается значение последнего операнда

not #(логическое отрицание)

#Возвращает True, если выражение равно False

age = 22
isMarried = False
print(not age > 21)  # False
print(not isMarried)  # True
print(not 4)  # False
print(not 0)  # True

Оператор in

#Оператор in возвращает True если в некотором наборе значений есть определенное значение. 
#Он имеет следующую форму:

#значение in набор_значений

#Например, строка представляет набор символов. 
# И с помощью оператора in мы можем проверить, есть ли в ней какая-нибудь подстрока:

message = "hello world!"
hello = "hello"

print(hello in message)  # True - подстрока hello есть в строке "hello world!"
 
gold = "gold"
print(gold in message)  # False - подстроки "gold" нет в строке "hello world!"

#Если нам надо наоборот проверить, нет ли в наборе значений какого-либо значения, 
# то мы може использовать модификацию оператора - not in. Она возвращает True, если в наборе значений НЕТ определенного значения:

message = "hello world!"
hello = "hello"
print(hello not in message)  # False
 
gold = "gold"
print(gold not in message)  # True


#УСЛОВНЫЕ КОНСТРУКЦИЯ if

#Условные конструкции используют условные выражения и в зависимости от их значения направляют выполнение программы по одному из путей. Одна из таких конструкций - это конструкция if. Она имеет следующее формальное определение:


if логическое_выражение:
    инструкции
[elif логическое выражение:
    инструкции]
[else: 
    инструкции]

#В самом простом виде после ключевого слова if идет логическое выражение. 
# И если это логическое выражение возвращает True, то выполняется последующий блок инструкций, 
# каждая из которых должна начинаться с новой строки и должна иметь отступы от начала выражения if 
# (отступ желательно делать в 4 пробела или то количество пробелов, которое кратно 4):

language = "english"
if language == "english":
    print("Hello")
print("End")

#Поскольку в данном случае значение переменной language равно "english", 
# то будет выполняться блок if, который содержит только одну инструкцию - print("Hello"). 
# В итоге консоль выведет следующие строки:

#Hello
#End

#Обратите внимание в коде на последнюю строку, которая выводит сообщение "End". 
# Она не имеет отступов от начала строки, поэтому она не принадлежит к блоку if и будет выполняться в любом случае, 
# даже если выражение в конструкции if возвратит False.

#Но если бы мы поставили бы отступы, то она также принадлежала бы к конструкции if:

language = "english"
if language == "english":
    print("Hello")
    print("End")

#Блок else

#Если вдруг нам надо определить альтернативное решение на тот случай, 
# если выражение в if возвратит False, то мы можем использовать блок else:


language = "russian"
if language == "english":
    print("Hello")
else:
    print("Привет")
print("End")

#Если выражение language == "english" возвращает True, 
# то выполняется блок if, иначе выполняется блок else. 
# И поскольку в данном случае условие language == "english" возвращает False, 
# то будут выполняться инструкция из блока else.

#Причем инструкции блока else также должны имет отступы от начала строки. 
# Например, в примере выше print("End") не имеет отступа, поэтому она не входит в блок else и 
# будет выполнятьься вне зависимости, чему равно условие language == "english". 
# То есть консоль нам выведет следующие строки:

#Привет
#End

#Блок else также может иметь несколько инструкций, которые должны иметь отступ от начала строки:


language = "russian"
if language == "english":
    print("Hello")
    print("World")
else:
    print("Привет")
    print("мир")
elif

#Если необходимо ввести несколько альтернативных условий, 
# то можно использовать дополнительные блоки elif, после которого идет блок инструкций.

language = "german"
if language == "english":
    print("Hello")
    print("World")
elif language == "german":
    print("Hallo")
    print("Welt")
else:
    print("Привет")
    print("мир")

#Сначала Python проверяет выражение if. 
# Если оно равно True, то выполняются инструкции из блока if. 
# Если это условие возвращает False, то Python проверяет выражение из elif.

#Если выражение после elif равно True, то выполняются инструкции из блока elif. 
# Но если оно равно False то выполняются инструкции из блока else

#При необходимости можно определить несколько блоков elif для разных условий. Например:


language = "german"
if language == "english":
    print("Hello")
elif language == "german":
    print("Hallo")
elif language == "french":
    print("Salut")
else:
    print("Привет")

#Вложенные конструкции if

К#онструкция if в свою очередь сама может иметь вложенные конструкции if:


language = "english"
daytime == "morning"
if language == "english":
    print("English")
    if daytime == "morning":
        print("Good morning")
    else:
        print("Good evening")

#Здесь конструкция if содержит вложенную конструкцию if/else. 
# То есть если переменная language равна "english", тогда вложенная конструкция if/else 
# дополнительно проверяет значение переменной daytime - равна ли она строке "morning" ли нет. 
# И в данном случае мы получим следующий консольный вывод:

#English
#Good morning
#Стоит учитывать, что вложенные выражения if также должны начинаться с отступов, 
#а инструкции во вложенных конструкциях также должны иметь отступы. 
# Отступы, расставленные не должным образом, могут изменить логику программы. 
# Так, предыдущий пример НЕ аналогичен следующему:


language = "english"
daytime = "morning"
if language == "english":
    print("English")
if daytime == "morning":
    print("Good morning")
else:
     print("Good evening")

#Подобным образом можно размещать вложенные конструкции if/elif/else в блоках elif и else:


language = "russian"
daytime = "morning"

if language == "english":
    if daytime == "morning":
        print("Good morning")
    else:
        print("Good evening")
else:
    if daytime == "morning":
        print("Доброе утро")
    else:
        print("Добрый вечер")


